name: Continuous Integration

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }} | ${{ matrix.config.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Visual Studio 64-bit",
            os: windows-2019,
            extra_options: "-A x64",
            build_type: "Release"
          }
        - {
            name: "Visual Studio 64-bit",
            os: windows-2019,
            extra_options: "-A x64",
            build_type: "Debug"
          }
        - {
            name: "Visual Studio 32-bit",
            os: windows-2019,
            extra_options: "-A Win32 -DFORCE_INTERNAL_ZLIB=ON",
            build_type: "Release"
          }
        - {
            name: "macOS",
            os: macos-11,
            build_type: "Release"
          }
        - {
            name: "macOS",
            os: macos-11,
            extra_options: "-DDYN_FLUIDSYNTH=OFF -DDYN_OPENAL=OFF -DDYN_SNDFILE=OFF -DDYN_MPG123=OFF",
            deps_cmdline: "brew install fluidsynth mpg123 libsndfile",
            build_type: "Debug"
          }
        - {
            name: "Linux GCC 7",
            os: ubuntu-20.04,
            extra_options: "-DCMAKE_C_COMPILER=gcc-7 -DCMAKE_CXX_COMPILER=g++-7",
            deps_cmdline: "sudo apt update && sudo apt install g++-7 libsdl2-dev libgtk2.0-dev",
            build_type: "RelWithDebInfo"
          }
        - {
            name: "Linux GCC 11",
            os: ubuntu-20.04,
            extra_options: "-DCMAKE_C_COMPILER=gcc-11 -DCMAKE_CXX_COMPILER=g++-11",
            deps_cmdline: "sudo apt update && sudo apt install g++-11 libsdl2-dev libgtk-3-dev",
            build_type: "MinSizeRel"
          }
        - {
            name: "Linux Clang 11",
            os: ubuntu-20.04,
            extra_options: "-DCMAKE_C_COMPILER=clang-11 -DCMAKE_CXX_COMPILER=clang++-11",
            deps_cmdline: "sudo apt update && sudo apt install clang-11 libsdl2-dev libvpx-dev",
            build_type: "Release"
          }

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ ! -z "${{ matrix.config.deps_cmdline }}" ]]; then
          eval ${{ matrix.config.deps_cmdline }}
        fi
        mkdir build
        if [[ "${{ runner.os }}" == 'macOS' ]]; then
          export ZMUSIC_PACKAGE=zmusic-1.1.7-macos.tar.bz2
        elif [[ "${{ runner.os }}" == 'Linux' ]]; then
          export ZMUSIC_PACKAGE=zmusic-1.1.7-linux.tar.bz2
        fi
        if [[ ! -z "${ZMUSIC_PACKAGE}" ]]; then
          cd build
          wget -q "https://github.com/coelckers/gzdoom/releases/download/ci_deps/${ZMUSIC_PACKAGE}"
          tar -xf "${ZMUSIC_PACKAGE}"
        fi

    - name: Configure
      shell: bash
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCMAKE_PREFIX_PATH=`pwd`/build/zmusic -DPK3_QUIET_ZIPDIR=ON ${{ matrix.config.extra_options }} .

    - name: Build
      shell: bash
      run: |
        export MAKEFLAGS=--keep-going
        cmake --build build --config ${{ matrix.config.build_type }} --parallel 3

    - name: Create Package
      if: runner.os == 'Windows'  # Remove to make packages of all targets
      shell: bash
      run: |
        cd build
        mkdir package
        if [[ "${{ runner.os }}" == 'Windows' ]]; then
          cp ${{ matrix.config.build_type }}/Goida.exe ${{ matrix.config.build_type }}/*.pk3 package
        elif [[ "${{ runner.os }}" == 'macOS' ]]; then
          cp -r Goida.app package
        elif [[ "${{ runner.os }}" == 'Linux' ]]; then
          cp Goida *.pk3 package
        fi

    - name: Upload Package
      if: runner.os == 'Windows'  # Remove to store packages of all targets
      uses: actions/upload-artifact@v4
      with:
        path: build/package
        name: ${{ matrix.config.name }} ${{ matrix.config.build_type }}

    - name: List Build Directory
      if: always()
      shell: bash
      run: |
        git status
        ls -lR build
